generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int         @id @default(autoincrement())
  email             String      @unique
  name              String?
  createdAt         DateTime    @default(now())
  password          String
  passwordResetCode String?     @default("")
  picture           String      @default("/avatar.png")
  role              Role        @default(SUBSCRIBER)
  stripeAccountId   String?
  stripeSeller      Json?
  stripeSession     Json?
  updatedAt         DateTime    @updatedAt
  Answer            Answer[]
  Completed         Completed[]
  Course            Course[]
  posts             Post[]
  QA                QA[]
  Support           Support[]
}

model Module {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(160)
  slug      String?  @db.VarChar(255)
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  lessons   Lesson[]
}

model Course {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(160)
  slug         String?     @db.VarChar(255)
  description  String
  price        Float       @default(9.99)
  onSale       Boolean     @default(false)
  displayPrice Float?
  image        String?
  published    Boolean     @default(false)
  completed    Int[]
  difficulty   Difficulty  @default(ALL_LEVELS)
  paid         Boolean     @default(true)
  instructorId Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Completed    Completed[]
  instructor   User        @relation(fields: [instructorId], references: [id])
  modules      Module[]
  QA           QA[]
  ratings      Rating[]
  categories   Category[]  @relation("CategoryToCourse")
}

model Lesson {
  id           Int        @id @default(autoincrement())
  title        String     @db.VarChar(160)
  slug         String?    @db.VarChar(255)
  content      String
  video        String?
  freePreview  Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  lessonTypeId Int
  moduleId     Int?
  lessonType   LessonType @relation(fields: [lessonTypeId], references: [id])
  QA           QA[]
  module       Module?    @relation(fields: [moduleId], references: [id])
  // instructor   User        @relation(fields: [instructorId], references: [id])
}

model LessonType {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(160)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lessons   Lesson[]
}

model Rating {
  id       Int     @id @default(autoincrement())
  value    Int
  comment  String?
  courseId Int
  course   Course  @relation(fields: [courseId], references: [id])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(56)
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[] @relation("CategoryToCourse")
  Post      Post[]   @relation("CategoryToPost")
}

model Completed {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  lessons   Int[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Post {
  id         Int        @id @default(autoincrement())
  title      String     @db.VarChar(240)
  published  Boolean    @default(true)
  body       String
  createdAt  DateTime   @default(now())
  excerpt    String?    @db.VarChar(1000)
  postedById Int
  slug       String?    @unique @db.VarChar(255)
  updatedAt  DateTime   @updatedAt
  postedBy   User       @relation(fields: [postedById], references: [id])
  categories Category[] @relation("CategoryToPost")
}

model QA {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(512)
  slug        String?  @unique @db.VarChar(255)
  description String
  resolved    Boolean  @default(false)
  postedById  Int
  courseId    Int?
  lessonId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  answers     Answer[]
  course      Course?  @relation(fields: [courseId], references: [id])
  lesson      Lesson?  @relation(fields: [lessonId], references: [id])
  postedBy    User     @relation(fields: [postedById], references: [id])
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String   @db.VarChar(56)
  postedById Int
  qaId       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  postedBy   User     @relation(fields: [postedById], references: [id])
  qa         QA       @relation(fields: [qaId], references: [id])
}

model Support {
  id         Int      @id @default(autoincrement())
  courseUrl  String?  @db.VarChar(512)
  message    String
  resolved   Boolean  @default(false)
  postedById Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  postedBy   User     @relation(fields: [postedById], references: [id])
}

enum Role {
  SUBSCRIBER
  AUTHOR
  INSTRUCTOR
  ADMIN
}

enum Difficulty {
  ALL_LEVELS
  BEGINNER
  INTERMEDIATE
  ADVANCE
}
